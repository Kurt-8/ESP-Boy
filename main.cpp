#include <Arduino.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <WiFi.h>
#include "time.h"

//Declare LCD object for SPI: Adafruit_PCD8544(CLK,DIN,D/C,CE,RST);
Adafruit_PCD8544 display = Adafruit_PCD8544(18, 23, 4, 15, 2);
//Declare pins
const int up = 12;
const int down = 27;
const int left = 14;
const int right = 26;
const int a = 25;
const int b = 33;
const int bl = 13;

//Set LCD contrast
const int contrastValue = 70;

//WiFi and time variables
//To disable time: Leave SSID blank and set "wifi_timeout" to 1
const char* ssid     = "YOUR SSID HERE";
const char* password = "YOUR PASSWORD HERE";
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;
int wifi_timeout = 50;

//Game Variables
int cat_x = 35;
int cat_y = 0;
int cat_move_x;
int cat_happy = 8;
int cat_food = 8;
int cat_drink = 8;
int cat_avg;
int random_stat;
int item_select = 1; 
int animation_type = 0;

//Timing Variables
unsigned long animationCurrentMillis = 0;
unsigned long animationPreviousMillis = 0;
const long animationInterval = 200;

unsigned long inputCurrentMillis = 0;
const long inputInterval = 200;

//Input variables
bool bl_toggle;

/*
================================================================================================================
| The following lines contain all the game graphics in byte arrays made with https://javl.github.io/image2cpp/ |
| The arrays under the cat graphics contain all the frames of an animation in the right order.                 |
================================================================================================================
*/

// 'Cat_idle_1_1', 21x29px
const unsigned char bitmap_Cat_idle_1_1 [] PROGMEM = {
	0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 
	0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x22, 0x04, 0x20, 0xf3, 0x06, 0x78, 0x20, 0x70, 
	0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0c, 0x01, 0x80, 0x03, 0xfe, 0x00, 
	0x04, 0x01, 0x00, 0x08, 0x00, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x10, 0x00, 0x60, 0x30, 
	0x00, 0x30, 0x50, 0x00, 0x28, 0x54, 0x89, 0x28, 0x54, 0x89, 0x68, 0x44, 0x89, 0x48, 0x4c, 0x89, 
	0x88, 0x2c, 0x89, 0xb8, 0x3f, 0xff, 0xf0
};
// 'Cat_idle_1_2', 21x29px
const unsigned char bitmap_Cat_idle_1_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 
	0x88, 0x40, 0x10, 0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x22, 0x04, 0x20, 0xf3, 0x06, 
	0x78, 0x20, 0x70, 0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0c, 0x01, 0x80, 
	0x03, 0xfe, 0x00, 0x0c, 0x01, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x10, 0x00, 0x60, 0x30, 
	0x00, 0x30, 0x50, 0x00, 0x28, 0x54, 0x89, 0x28, 0x54, 0x89, 0x68, 0x44, 0x89, 0x48, 0x4c, 0x89, 
	0x88, 0x2c, 0x89, 0xb8, 0x3f, 0xff, 0xf0
};
// 'Cat_idle_1_3', 21x29px
const unsigned char bitmap_Cat_idle_1_3 [] PROGMEM = {
	0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 
	0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x21, 0x02, 0x20, 0xf3, 0x06, 0x78, 0x20, 0x70, 
	0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0c, 0x01, 0x80, 0x03, 0xfe, 0x00, 
	0x04, 0x01, 0x00, 0x08, 0x00, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x10, 0x00, 0x60, 0x30, 
	0x00, 0x30, 0x50, 0x00, 0x28, 0x54, 0x89, 0x28, 0x54, 0x89, 0x68, 0x44, 0x89, 0x48, 0x4c, 0x89, 
	0x88, 0x2c, 0x89, 0xb8, 0x3f, 0xff, 0xf0
};
// 'Cat_idle_1_4', 21x29px
const unsigned char bitmap_Cat_idle_1_4 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 
	0x88, 0x40, 0x10, 0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x21, 0x02, 0x20, 0xf3, 0x06, 
	0x78, 0x20, 0x70, 0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0c, 0x01, 0x80, 
	0x03, 0xfe, 0x00, 0x0c, 0x01, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x10, 0x00, 0x60, 0x30, 
	0x00, 0x30, 0x50, 0x00, 0x28, 0x54, 0x89, 0x28, 0x54, 0x89, 0x68, 0x44, 0x89, 0x48, 0x4c, 0x89, 
	0x88, 0x2c, 0x89, 0xb8, 0x3f, 0xff, 0xf0
};

const unsigned char* bitmap_Cat_idle_1[16] = {
	bitmap_Cat_idle_1_1,
  bitmap_Cat_idle_1_1,
	bitmap_Cat_idle_1_2,
  bitmap_Cat_idle_1_2,
  bitmap_Cat_idle_1_1,
  bitmap_Cat_idle_1_1,
	bitmap_Cat_idle_1_2,
  bitmap_Cat_idle_1_2,
	bitmap_Cat_idle_1_3,
  bitmap_Cat_idle_1_3,
	bitmap_Cat_idle_1_4,
  bitmap_Cat_idle_1_4,
  bitmap_Cat_idle_1_3,
  bitmap_Cat_idle_1_3,
	bitmap_Cat_idle_1_4,
  bitmap_Cat_idle_1_4
};
int step_Cat_idle_1 = 0;


// 'bitmap_Cat_idle_2_1', 21x29px
const unsigned char bitmap_Cat_idle_2_1 [] PROGMEM = {
	0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 
	0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x22, 0x04, 0x20, 0xf3, 0x06, 0x78, 0x20, 0x70, 
	0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0c, 0x01, 0x80, 0x03, 0xfe, 0x00, 
	0x04, 0x01, 0x00, 0x08, 0x00, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x10, 0x00, 0x60, 0x30, 
	0x00, 0x30, 0x50, 0x00, 0x28, 0x54, 0x89, 0x28, 0x54, 0x89, 0x68, 0x44, 0x89, 0x48, 0x4c, 0x89, 
	0x88, 0x2c, 0x89, 0xb8, 0x3f, 0xff, 0xf0
};
// 'bitmap_Cat_idle_2_2', 21x29px
const unsigned char bitmap_Cat_idle_2_2 [] PROGMEM = {
	0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 
	0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x22, 0x04, 0x20, 0xf3, 0x06, 0x78, 0x20, 0x70, 
	0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0c, 0x01, 0x80, 0x03, 0xfe, 0x00, 
	0x04, 0x01, 0x00, 0x08, 0x00, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x10, 0x00, 0x60, 0x34, 
	0x00, 0x30, 0x54, 0x80, 0x28, 0x54, 0x49, 0x28, 0x52, 0x29, 0x68, 0x41, 0x29, 0x48, 0x48, 0xc9, 
	0x88, 0x28, 0x09, 0xb8, 0x3f, 0xff, 0xf0
};
// 'bitmap_Cat_idle_2_3', 21x29px
const unsigned char bitmap_Cat_idle_2_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 
	0x88, 0x40, 0x10, 0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0x21, 0x02, 0x20, 0xf3, 0x06, 
	0x78, 0x20, 0x70, 0x20, 0xf0, 0x20, 0x78, 0x21, 0x24, 0x20, 0x10, 0xd8, 0x40, 0x0e, 0x03, 0x80, 
	0x05, 0xfd, 0x00, 0x08, 0x00, 0x80, 0x10, 0x00, 0x40, 0x10, 0x00, 0x40, 0x11, 0x00, 0x60, 0x34, 
	0xe0, 0x30, 0x54, 0x10, 0x28, 0x53, 0x99, 0x28, 0x50, 0x69, 0x68, 0x40, 0x09, 0x48, 0x48, 0x09, 
	0x88, 0x28, 0x09, 0xb8, 0x3f, 0xff, 0xf0
};
// 'bitmap_Cat_idle_2_4', 21x29px
const unsigned char bitmap_Cat_idle_2_4 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 
	0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0xf1, 0x02, 
	0x78, 0x23, 0x06, 0x20, 0xf0, 0x70, 0x78, 0x20, 0x20, 0x20, 0x11, 0x24, 0x40, 0x0c, 0xd9, 0x80, 
	0x06, 0x03, 0x00, 0x09, 0xfc, 0x80, 0x10, 0x00, 0x40, 0x10, 0x60, 0x40, 0x11, 0x90, 0x60, 0x30, 
	0x10, 0x30, 0x56, 0x60, 0x28, 0x51, 0x89, 0x28, 0x50, 0x09, 0x68, 0x40, 0x09, 0x48, 0x48, 0x09, 
	0x88, 0x28, 0x09, 0xb8, 0x3f, 0xff, 0xf0
};
// 'bitmap_Cat_idle_2_5', 21x29px
const unsigned char bitmap_Cat_idle_2_5 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 
	0xf9, 0x80, 0x0c, 0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 
	0x20, 0xf2, 0x04, 0x78, 0x23, 0x06, 0x20, 0xf0, 0x70, 0x78, 0x20, 0x20, 0x20, 0x11, 0x24, 0x40, 
	0x08, 0xd8, 0x80, 0x06, 0x63, 0x00, 0x08, 0x90, 0x80, 0x10, 0x90, 0x40, 0x11, 0x20, 0x60, 0x30, 
	0x20, 0x30, 0x56, 0x40, 0x28, 0x51, 0x89, 0x28, 0x50, 0x09, 0x68, 0x40, 0x09, 0x48, 0x48, 0x09, 
	0x88, 0x28, 0x09, 0xb8, 0x3f, 0xff, 0xf0
};
// 'bitmap_Cat_idle_2_6', 21x29px
const unsigned char bitmap_Cat_idle_2_6 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x05, 0x05, 0x00, 0x0c, 0xf9, 0x80, 0x0c, 
	0xa9, 0x80, 0x10, 0x88, 0x40, 0x10, 0x00, 0x40, 0x20, 0x00, 0x20, 0x23, 0x06, 0x20, 0xf2, 0x04, 
	0x78, 0x23, 0x06, 0x20, 0xf0, 0x70, 0x78, 0x20, 0x20, 0x20, 0x11, 0x24, 0x40, 0x0c, 0xd9, 0x80, 
	0x06, 0x03, 0x00, 0x08, 0x60, 0x80, 0x08, 0x90, 0x40, 0x10, 0x90, 0x60, 0x11, 0x20, 0x20, 0x30, 
	0x20, 0x30, 0x56, 0x40, 0x28, 0x51, 0x89, 0x28, 0x50, 0x09, 0x68, 0x40, 0x09, 0x48, 0x48, 0x09, 
	0x88, 0x28, 0x09, 0xb8, 0x3f, 0xff, 0xf0
};

const unsigned char* bitmap_Cat_idle_2[15] = {
	bitmap_Cat_idle_2_1,
	bitmap_Cat_idle_2_2,
	bitmap_Cat_idle_2_3,
	bitmap_Cat_idle_2_4,
	bitmap_Cat_idle_2_5,
	bitmap_Cat_idle_2_6,
  bitmap_Cat_idle_2_5,
	bitmap_Cat_idle_2_6,
  bitmap_Cat_idle_2_5,
	bitmap_Cat_idle_2_6,
  bitmap_Cat_idle_2_5,
	bitmap_Cat_idle_2_4,
  bitmap_Cat_idle_2_3,
	bitmap_Cat_idle_2_2,
  bitmap_Cat_idle_2_1
};
int step_Cat_idle_2 = 0;

// 'Cat_move_left_1', 36x29px
const unsigned char bitmap_Cat_move_left_1 [] PROGMEM = {
	0x02, 0x02, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x0c, 0xf9, 0x80, 0x1c, 0x00, 0x0c, 
	0xa9, 0x80, 0x23, 0x00, 0x10, 0x88, 0x40, 0x28, 0x80, 0x10, 0x00, 0x40, 0x1a, 0x80, 0x20, 0x00, 
	0x20, 0x04, 0x40, 0x23, 0x06, 0x20, 0x03, 0x40, 0x22, 0x04, 0x20, 0x02, 0x40, 0xf3, 0x06, 0x78, 
	0x03, 0x40, 0x20, 0x70, 0x20, 0x02, 0x40, 0xf0, 0x20, 0x78, 0x02, 0x40, 0x21, 0x24, 0x20, 0x03, 
	0x40, 0x10, 0xf8, 0x40, 0x04, 0x40, 0x0c, 0x01, 0xbf, 0xfa, 0x40, 0x03, 0xfe, 0x09, 0x20, 0x80, 
	0x00, 0x80, 0x04, 0x90, 0x80, 0x01, 0x00, 0x04, 0x90, 0x80, 0x01, 0x00, 0x04, 0x80, 0x80, 0x01, 
	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x81, 
	0x20, 0x09, 0x00, 0x00, 0x7f, 0x3f, 0xf9, 0x00, 0x00, 0x49, 0x22, 0x49, 0x00, 0x00, 0x49, 0x22, 
	0x49, 0x00, 0x00, 0x89, 0x22, 0x51, 0x00, 0x00, 0x72, 0x24, 0x4e, 0x00, 0x00, 0x01, 0xc3, 0x80, 
	0x00
};
// 'Cat_move_left_2', 36x29px
const unsigned char bitmap_Cat_move_left_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x0c, 
	0xf9, 0x80, 0x07, 0x00, 0x0c, 0xa9, 0x80, 0x08, 0xc0, 0x10, 0x88, 0x40, 0x0a, 0x20, 0x10, 0x00, 
	0x40, 0x06, 0xa0, 0x20, 0x00, 0x20, 0x01, 0x10, 0x23, 0x06, 0x20, 0x00, 0xd0, 0x22, 0x04, 0x20, 
	0x00, 0x90, 0xf3, 0x06, 0x78, 0x01, 0xa0, 0x20, 0x70, 0x20, 0x01, 0x20, 0xf0, 0x20, 0x78, 0x01, 
	0x20, 0x21, 0x24, 0x20, 0x03, 0x40, 0x10, 0xf8, 0x40, 0x04, 0x40, 0x0c, 0x01, 0xbf, 0xfa, 0x40, 
	0x03, 0xfe, 0x09, 0x20, 0x80, 0x01, 0x00, 0x04, 0x90, 0x80, 0x01, 0x00, 0x04, 0x90, 0x80, 0x01, 
	0x00, 0x04, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x82, 
	0x40, 0x05, 0x00, 0x00, 0x7f, 0x3f, 0xf9, 0x00, 0x00, 0x91, 0x22, 0x51, 0x00, 0x00, 0x91, 0x22, 
	0x52, 0x00, 0x01, 0x20, 0x91, 0x32, 0x00, 0x02, 0x20, 0x91, 0x22, 0x00, 0x01, 0xc0, 0x60, 0xdc, 
	0x00
};
// 'Cat_move_left_3', 36x29px
const unsigned char bitmap_Cat_move_left_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x0c, 
	0xf9, 0x80, 0x00, 0xc0, 0x0c, 0xa9, 0x80, 0x01, 0x20, 0x10, 0x88, 0x40, 0x01, 0x90, 0x10, 0x00, 
	0x40, 0x01, 0x50, 0x20, 0x00, 0x20, 0x00, 0x90, 0x23, 0x06, 0x20, 0x00, 0xd0, 0x22, 0x04, 0x20, 
	0x00, 0x90, 0xf3, 0x06, 0x78, 0x01, 0xa0, 0x20, 0x70, 0x20, 0x01, 0x20, 0xf0, 0x20, 0x78, 0x01, 
	0x20, 0x21, 0x24, 0x20, 0x03, 0x40, 0x10, 0xf8, 0x40, 0x04, 0x40, 0x0c, 0x01, 0xbf, 0xfa, 0x40, 
	0x03, 0xfe, 0x09, 0x20, 0x80, 0x01, 0x00, 0x04, 0x90, 0x80, 0x01, 0x00, 0x04, 0x90, 0x80, 0x01, 
	0x00, 0x04, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x81, 
	0x20, 0x09, 0x00, 0x00, 0x7f, 0x3f, 0xf9, 0x00, 0x00, 0x49, 0x22, 0x49, 0x00, 0x00, 0x49, 0x22, 
	0x49, 0x00, 0x00, 0x4a, 0x24, 0x49, 0x00, 0x00, 0x89, 0xc3, 0x91, 0x00, 0x00, 0x70, 0x00, 0x0e, 
	0x00
};
// 'Cat_move_left_4', 36x29px
const unsigned char bitmap_Cat_move_left_4 [] PROGMEM = {
	0x02, 0x02, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x0c, 0xf9, 0x80, 0x07, 0x00, 0x0c, 
	0xa9, 0x80, 0x08, 0xc0, 0x10, 0x88, 0x40, 0x0a, 0x20, 0x10, 0x00, 0x40, 0x06, 0xa0, 0x20, 0x00, 
	0x20, 0x01, 0x10, 0x23, 0x06, 0x20, 0x00, 0xd0, 0x22, 0x04, 0x20, 0x00, 0x90, 0xf3, 0x06, 0x78, 
	0x01, 0xa0, 0x20, 0x70, 0x20, 0x01, 0x20, 0xf0, 0x20, 0x78, 0x01, 0x20, 0x21, 0x24, 0x20, 0x03, 
	0x40, 0x10, 0xf8, 0x40, 0x04, 0x40, 0x0c, 0x01, 0xbf, 0xfa, 0x40, 0x03, 0xfe, 0x09, 0x20, 0x80, 
	0x00, 0x80, 0x04, 0x90, 0x80, 0x01, 0x00, 0x04, 0x90, 0x80, 0x01, 0x00, 0x04, 0x80, 0x80, 0x01, 
	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 
	0x90, 0x11, 0x00, 0x00, 0x7f, 0x3f, 0xf8, 0x80, 0x00, 0x4a, 0x24, 0x48, 0x80, 0x00, 0x4a, 0x44, 
	0x84, 0x80, 0x00, 0x26, 0x44, 0x84, 0x40, 0x00, 0x24, 0x48, 0x82, 0x40, 0x00, 0x1b, 0x87, 0x01, 
	0x80
};

const unsigned char* bitmap_Cat_move_left[4] = {
	bitmap_Cat_move_left_1,
	bitmap_Cat_move_left_2,
	bitmap_Cat_move_left_3,
	bitmap_Cat_move_left_4
};
int step_Cat_move_left = 0;

// 'Cat_move_right_1', 36x29px
const unsigned char bitmap_Cat_move_right_1 [] PROGMEM = {
	0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x03, 0x80, 0x19, 0xf3, 0x00, 0x0c, 
	0x40, 0x19, 0x53, 0x00, 0x11, 0x40, 0x21, 0x10, 0x80, 0x15, 0x80, 0x20, 0x00, 0x80, 0x22, 0x00, 
	0x40, 0x00, 0x40, 0x2c, 0x00, 0x46, 0x0c, 0x40, 0x24, 0x00, 0x42, 0x04, 0x40, 0x2c, 0x01, 0xe6, 
	0x0c, 0xf0, 0x24, 0x00, 0x40, 0xe0, 0x40, 0x24, 0x01, 0xe0, 0x40, 0xf0, 0x2c, 0x00, 0x42, 0x48, 
	0x40, 0x22, 0x00, 0x21, 0xf0, 0x80, 0x25, 0xff, 0xd8, 0x03, 0x00, 0x10, 0x49, 0x07, 0xfc, 0x00, 
	0x10, 0x92, 0x00, 0x10, 0x00, 0x10, 0x92, 0x00, 0x08, 0x00, 0x10, 0x12, 0x00, 0x08, 0x00, 0x10, 
	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x09, 0x00, 
	0x48, 0x10, 0x00, 0x09, 0xff, 0xcf, 0xe0, 0x00, 0x09, 0x24, 0x49, 0x20, 0x00, 0x09, 0x24, 0x49, 
	0x20, 0x00, 0x08, 0xa4, 0x49, 0x10, 0x00, 0x07, 0x22, 0x44, 0xe0, 0x00, 0x00, 0x1c, 0x38, 0x00, 
	0x00
};
// 'Cat_move_right_2', 36x29px
const unsigned char bitmap_Cat_move_right_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x0e, 
	0x00, 0x19, 0xf3, 0x00, 0x31, 0x00, 0x19, 0x53, 0x00, 0x45, 0x00, 0x21, 0x10, 0x80, 0x56, 0x00, 
	0x20, 0x00, 0x80, 0x88, 0x00, 0x40, 0x00, 0x40, 0xb0, 0x00, 0x46, 0x0c, 0x40, 0x90, 0x00, 0x42, 
	0x04, 0x40, 0x58, 0x01, 0xe6, 0x0c, 0xf0, 0x48, 0x00, 0x40, 0xe0, 0x40, 0x48, 0x01, 0xe0, 0x40, 
	0xf0, 0x2c, 0x00, 0x42, 0x48, 0x40, 0x22, 0x00, 0x21, 0xf0, 0x80, 0x25, 0xff, 0xd8, 0x03, 0x00, 
	0x10, 0x49, 0x07, 0xfc, 0x00, 0x10, 0x92, 0x00, 0x08, 0x00, 0x10, 0x92, 0x00, 0x08, 0x00, 0x10, 
	0x12, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x0a, 0x00, 
	0x24, 0x10, 0x00, 0x09, 0xff, 0xcf, 0xe0, 0x00, 0x08, 0xa4, 0x48, 0x90, 0x00, 0x04, 0xa4, 0x48, 
	0x90, 0x00, 0x04, 0xc8, 0x90, 0x48, 0x00, 0x04, 0x48, 0x90, 0x44, 0x00, 0x03, 0xb0, 0x60, 0x38, 
	0x00
};
// 'Cat_move_right_3', 36x29px
const unsigned char bitmap_Cat_move_right_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x30, 
	0x00, 0x19, 0xf3, 0x00, 0x48, 0x00, 0x19, 0x53, 0x00, 0x98, 0x00, 0x21, 0x10, 0x80, 0xa8, 0x00, 
	0x20, 0x00, 0x80, 0x90, 0x00, 0x40, 0x00, 0x40, 0xb0, 0x00, 0x46, 0x0c, 0x40, 0x90, 0x00, 0x42, 
	0x04, 0x40, 0x58, 0x01, 0xe6, 0x0c, 0xf0, 0x48, 0x00, 0x40, 0xe0, 0x40, 0x48, 0x01, 0xe0, 0x40, 
	0xf0, 0x2c, 0x00, 0x42, 0x48, 0x40, 0x22, 0x00, 0x21, 0xf0, 0x80, 0x25, 0xff, 0xd8, 0x03, 0x00, 
	0x10, 0x49, 0x07, 0xfc, 0x00, 0x10, 0x92, 0x00, 0x08, 0x00, 0x10, 0x92, 0x00, 0x08, 0x00, 0x10, 
	0x12, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x09, 0x00, 
	0x48, 0x10, 0x00, 0x09, 0xff, 0xcf, 0xe0, 0x00, 0x09, 0x24, 0x49, 0x20, 0x00, 0x09, 0x24, 0x49, 
	0x20, 0x00, 0x09, 0x22, 0x45, 0x20, 0x00, 0x08, 0x9c, 0x39, 0x10, 0x00, 0x07, 0x00, 0x00, 0xe0, 
	0x00
};
// 'Cat_move_right_4', 36x29px
const unsigned char bitmap_Cat_move_right_4 [] PROGMEM = {
	0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x0e, 0x00, 0x19, 0xf3, 0x00, 0x31, 
	0x00, 0x19, 0x53, 0x00, 0x45, 0x00, 0x21, 0x10, 0x80, 0x56, 0x00, 0x20, 0x00, 0x80, 0x88, 0x00, 
	0x40, 0x00, 0x40, 0xb0, 0x00, 0x46, 0x0c, 0x40, 0x90, 0x00, 0x42, 0x04, 0x40, 0x58, 0x01, 0xe6, 
	0x0c, 0xf0, 0x48, 0x00, 0x40, 0xe0, 0x40, 0x48, 0x01, 0xe0, 0x40, 0xf0, 0x2c, 0x00, 0x42, 0x48, 
	0x40, 0x22, 0x00, 0x21, 0xf0, 0x80, 0x25, 0xff, 0xd8, 0x03, 0x00, 0x10, 0x49, 0x07, 0xfc, 0x00, 
	0x10, 0x92, 0x00, 0x10, 0x00, 0x10, 0x92, 0x00, 0x08, 0x00, 0x10, 0x12, 0x00, 0x08, 0x00, 0x10, 
	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x08, 0x80, 
	0x90, 0x10, 0x00, 0x11, 0xff, 0xcf, 0xe0, 0x00, 0x11, 0x22, 0x45, 0x20, 0x00, 0x12, 0x12, 0x25, 
	0x20, 0x00, 0x22, 0x12, 0x26, 0x40, 0x00, 0x24, 0x11, 0x22, 0x40, 0x00, 0x18, 0x0e, 0x1d, 0x80, 
	0x00
};

const unsigned char* bitmap_Cat_move_right[4] = {
	bitmap_Cat_move_right_1,
	bitmap_Cat_move_right_2,
	bitmap_Cat_move_right_3,
	bitmap_Cat_move_right_4
};
int step_Cat_move_right = 0;

// 'Main_UI', 84x19px
const unsigned char bitmap_Main_UI [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe3, 0x8f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf8, 0x00, 
	0x00, 0x45, 0x14, 0x50, 0x00, 0x00, 0x00, 0x09, 0x20, 0x24, 0x00, 0x00, 0x45, 0x14, 0x50, 0x00, 
	0x00, 0x00, 0x0a, 0x50, 0x52, 0x00, 0x00, 0x45, 0x14, 0x50, 0x00, 0x00, 0x00, 0x0a, 0xcf, 0x9a, 
	0x00, 0x00, 0x45, 0x14, 0x50, 0x00, 0x00, 0x00, 0x0a, 0xca, 0x9a, 0x00, 0x00, 0x45, 0x14, 0x50, 
	0x00, 0x00, 0x00, 0x0b, 0x08, 0x86, 0x00, 0x00, 0x45, 0x14, 0x50, 0x00, 0x00, 0x00, 0x0b, 0x00, 
	0x06, 0x00, 0x00, 0x45, 0x14, 0x50, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x45, 0x14, 
	0x50, 0x00, 0x00, 0x00, 0x0a, 0x30, 0x62, 0x00, 0x00, 0x38, 0xe3, 0x90, 0x00, 0x00, 0x00, 0x0a, 
	0x20, 0x42, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x30, 0x62, 0x00, 0x00, 0x10, 
	0xa2, 0x90, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x38, 0xa2, 0x90, 0x00, 0x00, 0x00, 
	0x0a, 0x00, 0x02, 0x00, 0x00, 0x28, 0xe0, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 
	0x74, 0x44, 0x50, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x00, 0x7c, 0x43, 0x90, 0x00, 0x00, 
	0x00, 0x09, 0xc0, 0x1c, 0x00, 0x00, 0x38, 0x40, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf8, 0x00, 
	0x00
};

// 'Items', 32x15px
const unsigned char bitmap_Items [] PROGMEM = {
	0x0a, 0x20, 0x84, 0x38, 0x1f, 0x22, 0xc4, 0xee, 0x36, 0x27, 0xe4, 0xf6, 0x63, 0x27, 0xa5, 0x4d, 
	0x7f, 0x2d, 0xf5, 0x63, 0x7f, 0x2e, 0x15, 0x5b, 0x7f, 0x2e, 0xb5, 0x95, 0x5a, 0x2d, 0x54, 0xc6, 
	0x25, 0x2e, 0xb4, 0xea, 0x7f, 0x27, 0xe4, 0x3c, 0x63, 0x23, 0xc4, 0x04, 0x6b, 0x21, 0x84, 0x04, 
	0x7f, 0x23, 0xc4, 0x0c, 0x7f, 0x26, 0xa4, 0x38, 0x00, 0x20, 0x04, 0xe0
};

// 'Item_fish', 10x15px
const unsigned char bitmap_Item_fish [] PROGMEM = {
	0xfb, 0xc0, 0xe9, 0xc0, 0xc0, 0xc0, 0xc2, 0xc0, 0x90, 0x40, 0x8f, 0x40, 0x8a, 0x40, 0x95, 0x40, 
	0x8a, 0x40, 0xc0, 0xc0, 0xe1, 0xc0, 0xf3, 0xc0, 0xe1, 0xc0, 0xca, 0xc0, 0xff, 0xc0
};
// 'Item_milk', 10x15px
const unsigned char bitmap_Item_milk [] PROGMEM = {
	0xf5, 0xc0, 0xe0, 0xc0, 0xc9, 0xc0, 0x9c, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xa5, 0xc0, 
	0xda, 0xc0, 0x80, 0xc0, 0x9c, 0xc0, 0x94, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xff, 0xc0
};
// 'Item_wool', 10x15px
const unsigned char bitmap_Item_wool [] PROGMEM = {
	0xf1, 0xc0, 0xc4, 0x40, 0xc2, 0x40, 0xac, 0x80, 0xa7, 0x00, 0xa9, 0x00, 0x9a, 0x80, 0xce, 0x40, 
	0xc5, 0x40, 0xf0, 0xc0, 0xfe, 0xc0, 0xfe, 0xc0, 0xfc, 0xc0, 0xf1, 0xc0, 0xc7, 0xc0
};

// 'Cat_frown', 7x4px
const unsigned char bitmap_Cat_frown [] PROGMEM = {
	0x38, 0x10, 0x7c, 0x82
};
// 'Cat_neutral', 7x4px
const unsigned char bitmap_Cat_neutral [] PROGMEM = {
	0x38, 0x10, 0x10, 0xfe
};
// 'Cat_smile', 7x4px
const unsigned char bitmap_Cat_smile [] PROGMEM = {
	0x38, 0x10, 0x92, 0x7c
};

/*
================================================================================================================
|                                       The actual game code begins here                                       |
================================================================================================================
*/


//Declare functions
void getTime() {
  if (wifi_timeout != 0) {
    struct tm timeinfo;
    if(!getLocalTime(&timeinfo)){
      return;
    }
    //Print current time to lower right corner
    display.setCursor(72, 32);
    display.println(&timeinfo, "%H");
    display.setCursor(72, 40);
    display.println(&timeinfo, "%M");
    return;
  }
}

void initPins() {
  //Set all button pins to inputs and the backlight pin to output
  pinMode (bl, OUTPUT);
  pinMode(up, INPUT_PULLUP);
  pinMode(down, INPUT_PULLUP);
  pinMode(left, INPUT_PULLUP);
  pinMode(right, INPUT_PULLUP);
  pinMode(a, INPUT_PULLUP);
  pinMode(b, INPUT_PULLUP);
}

void initDisplay() 
{
  //Initialize the display
  display.begin();
  display.setContrast(contrastValue);
  display.setRotation(2);
  display.clearDisplay();
  display.display();
  delay(100);
}

void initTime() {
  //Connect to WiFi and get the time from the NTP server.
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    wifi_timeout --;
    if (wifi_timeout == 0) {
      break;
    }
  }
  if (wifi_timeout != 0) {
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    getTime();
  }
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
}

void animateCat() {
  //Handle the cat's animation, animation_type sets the animation thats currently playing.
  if (animation_type == 0) {
    display.drawBitmap(cat_x, cat_y, bitmap_Cat_idle_1[step_Cat_idle_1], 21, 29, BLACK);
    step_Cat_idle_1 = step_Cat_idle_1 + 1;
    if (step_Cat_idle_1 == sizeof(bitmap_Cat_idle_1)/4) {
      step_Cat_idle_1 = 0;
    }
    step_Cat_idle_2 = 0;
    step_Cat_move_left = 0;
    step_Cat_move_right = 0;
    return;
  }

  if (animation_type == 1) {
    display.drawBitmap(cat_x, cat_y, bitmap_Cat_idle_2[step_Cat_idle_2], 21, 29, BLACK);
    step_Cat_idle_2 = step_Cat_idle_2 + 1;
    if (step_Cat_idle_2 == sizeof(bitmap_Cat_idle_2)/4) {
      step_Cat_idle_2 = 0;
      animation_type = 0;
    }
    step_Cat_idle_1 = 0;
    step_Cat_move_left = 0;
    step_Cat_move_right = 0;
    return;
  }
  if (animation_type == 2) {
    display.drawBitmap(cat_x, cat_y, bitmap_Cat_move_left[step_Cat_move_left], 36, 29, BLACK);
    step_Cat_move_left = step_Cat_move_left + 1;
    if (step_Cat_move_left == sizeof(bitmap_Cat_move_left)/4) {
      step_Cat_move_left = 0;
    }
    step_Cat_idle_1 = 0;
    step_Cat_idle_2 = 0;
    step_Cat_move_right = 0;
    return;
  }
  if (animation_type == 3) {
    display.drawBitmap(cat_x, cat_y, bitmap_Cat_move_right[step_Cat_move_right], 36, 29, BLACK);
    step_Cat_move_right = step_Cat_move_right + 1;
    if (step_Cat_move_right == sizeof(bitmap_Cat_move_right)/4) {
      step_Cat_move_right = 0;
    }
    step_Cat_idle_1 = 0;
    step_Cat_idle_2 = 0;
    step_Cat_move_left = 0;
    return;
  }
}

void animateUI() {
  //Draw and animate the UI
  display.drawBitmap(0, 29, bitmap_Main_UI, 84, 19, BLACK);
  display.drawBitmap(20, 32, bitmap_Items, 32, 15, BLACK);
  display.fillRect(2, 40, 3, -cat_drink + 1, BLACK);
  display.fillRect(8, 40, 3, -cat_food + 1, BLACK);
  display.fillRect(14, 40, 3, -cat_happy + 1, BLACK);
  cat_avg = cat_drink/3 + cat_food/3 + cat_happy/3;
  if (cat_avg > 5) {
    display.drawBitmap(59, 42, bitmap_Cat_smile, 7, 4, BLACK);
  } else if (cat_avg > 3) {
    display.drawBitmap(59, 42, bitmap_Cat_neutral, 7, 4, BLACK);
  } else {
    display.drawBitmap(59, 42, bitmap_Cat_frown, 7, 4, BLACK);
  }
  if (item_select == 0) {
    display.fillRect(20, 32, 10, 15, WHITE);
    display.drawBitmap(20, 32, bitmap_Item_milk, 10, 15, BLACK);
  } 
  if (item_select == 1) {
    display.fillRect(31, 32, 10, 15, WHITE);
    display.drawBitmap(31, 32, bitmap_Item_fish, 10, 15, BLACK);
  } 
  if (item_select == 2) {
    display.fillRect(42, 32, 10, 15, WHITE);
    display.drawBitmap(42, 32, bitmap_Item_wool, 10, 15, BLACK);
  }
}

void movementCat() {
  //Make the cat move randomly and set the according animation_type variable.
  if (animation_type == 0 || 1) {
    if (random(50) == 1) {
      cat_move_x = random(70);
      if (cat_x < cat_move_x) {
        animation_type = 3;
      }
      if (cat_x > cat_move_x) {
        animation_type = 2;
      }
    }
    else if (random(10) == 1) {
      animation_type = 1;
    }
  } 
  if (animation_type == 2) {
      cat_x = cat_x - 1;
  }
  if (animation_type == 3) {
      cat_x = cat_x + 1;
  }
  if (cat_x == cat_move_x) {
    animation_type = 0;
  }
}

void input() {
  //Handle the inputs
  if (digitalRead(left) == LOW && item_select > 0) {
    item_select --;
    inputCurrentMillis = millis();
  }
  if (digitalRead(right) == LOW && item_select < 2) {
    item_select ++;
    inputCurrentMillis = millis();
  }
  if (digitalRead(a) == LOW) {
    if (item_select == 0 && cat_drink < 8) {
      cat_drink ++;
      inputCurrentMillis = millis();
    }
    if (item_select == 1 && cat_food < 8) {
      cat_food ++;
      inputCurrentMillis = millis();
    }
    if (item_select == 2 && cat_happy < 8) {
      cat_happy ++;
      inputCurrentMillis = millis();
    }
  }
  if (digitalRead(b) == LOW) {
    bl_toggle = !bl_toggle;
    if (bl_toggle == 1) {
      digitalWrite(bl, HIGH);
    } else {
      digitalWrite(bl, LOW);
    }
    inputCurrentMillis = millis();
  }
}

void stats() {
  //Randomly decrease the cats stats
  if (random(100) == 1) {
    random_stat = random(3);
    if (random_stat == 0) {
      if (cat_drink > 0) {
        cat_drink --;
      }
    }
    if (random_stat == 1) {
      if (cat_food > 0) {
        cat_food --;
      }
    }
    if (random_stat == 2) {
      if (cat_happy > 0) {
        cat_happy --;
      }
    }
  }
}

void setup()
{
  initPins();
  initDisplay();
  initTime();
}

void loop()
{
  animationCurrentMillis = millis();

    //Only update animation every 'animationFrameInterval' milliseconds
    if (animationCurrentMillis - animationPreviousMillis >= animationInterval) {
        animationPreviousMillis = animationCurrentMillis;
        display.clearDisplay();
        animateCat();
        animateUI();
        movementCat();
        stats();
        getTime();
        display.display();
    }
    //Only process a new input 'inputInterval' milliseconds after the last input
    if (millis() >= inputCurrentMillis + inputInterval) {
      input();
    }
  }